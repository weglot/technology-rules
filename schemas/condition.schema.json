{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "condition.schema.json",
  "defs": {
    "ConditionArray": {
      "title": "Conditions",
      "description": "Conditions to be satisfied before the rule is applied",
      "type": "array",
      "default": [],
      "items": {
        "anyOf": [
          {
            "$ref": "#/defs/Condition"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/defs/Condition"
            }
          },
          {
            "$ref": "#/defs/OperatorAnd"
          },
          {
            "$ref": "#/defs/OperatorOr"
          }
        ]
      }
    },
    "OperatorAnd": {
      "type": "object",
      "properties": {
        "and": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/defs/Condition"
              },
              {
                "$ref": "#/defs/OperatorAnd"
              },
              {
                "$ref": "#/defs/OperatorOr"
              }
            ]
          }
        }
      }
    },
    "OperatorOr": {
      "type": "object",
      "properties": {
        "or": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/defs/Condition"
              },
              {
                "$ref": "#/defs/OperatorAnd"
              },
              {
                "$ref": "#/defs/OperatorOr"
              }
            ]
          }
        }
      }
    },
    "Condition": {
      "description": "",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "title": "Condition type",
          "type": "string",
          "default": "FROM_DEFINITION_ID",
          "oneOf": [
            {
              "const": "FROM_DEFINITION_ID",
              "title": "Comes from a specific parent definition"
            },
            {
              "const": "CDN_PROVIDER",
              "title": "Only on a specific CDN provider"
            },
            {
              "const": "HOST_MATCH",
              "title": "Match the (original-language) URL hostname of the page being translated"
            },
            {
              "const": "PATH_MATCH",
              "title": "Match the (original-language) URL path (excluding search, ID) of the page being translated"
            },
            {
              "const": "URI_MATCH",
              "title": "Full string match on the (original-language) URL string of the page being translated"
            },
            {
              "const": "TRANSLATION_URL_MATCH",
              "title": "Full string match on the URL string of the page being translated"
            },
            {
              "const": "TRANSLATION_HOST_MATCH",
              "title": "Match the URL hostname of the page being translated"
            },
            {
              "const": "SOURCE_CONTEXT",
              "title": "Match attributes of the context in which the translation request was made to Weglot"
            },
            {
              "const": "TRANSLATION_PATH_MATCH",
              "title": "Match the URL pathname (not counting query, hash) of the page being translated"
            },
            {
              "const": "TECHNOLOGY_ID",
              "title": "Website CMS technology"
            },
            {
              "const": "RESPONSE_HEADER_MATCH",
              "title": "Match header in the response from the origin website"
            },
            {
              "const": "REQUEST_HEADER_MATCH",
              "title": "Match header in the request sent to the origin website"
            },
            {
              "const": "XML_ATTRIBUTE_VALUE",
              "title": "Check an XML attribute value on XML resources"
            },
            {
              "const": "XML_ROOT_ELEMENT_NAME",
              "title": "Check if XML element is present and at document's root"
            },
            {
              "const": "URL_TYPE",
              "title": "Check if the site is on subdirectory or subdomain integration"
            },
            {
              "const": "INTEGRATION",
              "title": "Check the integration of the project (proxy or javascript)"
            },
            {
              "const": "DOM_CONTAINS",
              "title": "Check the if the dom contains an element using a css selector"
            },
            {
              "const": "IN_FRAME",
              "title": "Check the if the window is in an iFrame"
            },
            {
              "const": "INCOMING_PROXY_FORMAT",
              "title": "Checks which format of proxy we are in"
            }
          ]
        },
        "payload": {
          "title": ""
        }
      },
      "dependencies": {
        "type": {
          "oneOf": [
            {
              "properties": {
                "type": {
                  "const": "FROM_DEFINITION_ID"
                },
                "payload": {
                  "type": "string",
                  "title": "ID of the parent definition"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "HOST_MATCH"
                },
                "payload": {
                  "description": "The host of the resource we want to translate needs to be fulfill a criteria",
                  "$ref": "#/defs/StringMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "URI_MATCH"
                },
                "payload": {
                  "description": "The URL of the resource we want to translate (without query string) needs to be in the list",
                  "$ref": "#/defs/StringMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "PATH_MATCH"
                },
                "payload": {
                  "description": "The path of the resource we want to translate needs to fulfill a criteria",
                  "$ref": "#/defs/StringMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "TRANSLATION_HOST_MATCH"
                },
                "payload": {
                  "description": "The translation URL hostname of the resource we want to translate needs to fulfill a criteria",
                  "$ref": "#/defs/StringMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "SOURCE_CONTEXT"
                },
                "payload": {
                  "description": "The translation request must have been made in a certain context",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "render",
                        "editor"
                      ]
                    },
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "TRANSLATION_PATH_MATCH"
                },
                "payload": {
                  "description": "Match the path (excluding search, ID) of the page being translated",
                  "$ref": "#/defs/StringMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "TRANSLATION_URL_MATCH"
                },
                "payload": {
                  "description": "The translation URL of the resource we want to translate needs to fulfill a criteria",
                  "$ref": "#/defs/StringMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "TECHNOLOGY_ID"
                },
                "payload": {
                  "description": "Only applies for pages served by the selected technology",
                  "$ref": "common.schema.json#/defs/TechnologyID"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "CDN_PROVIDER"
                },
                "payload": {
                  "description": "Only applies for sites handled by the selected CDN provider",
                  "$ref": "#/defs/CDNProvider"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "RESPONSE_HEADER_MATCH"
                },
                "payload": {
                  "description": "Detect using the incoming headers from the source",
                  "$ref": "#/defs/StringMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "REQUEST_HEADER_MATCH"
                },
                "payload": {
                  "description": "Detect using the headers sent to the source from the client",
                  "$ref": "#/defs/StringMatch"
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "XML_ATTRIBUTE_VALUE"
                },
                "payload": {
                  "type": "object",
                  "properties": {
                    "selector": {
                      "type": "string"
                    },
                    "attr": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "XML_ROOT_ELEMENT_NAME"
                },
                "payload": {
                  "type": "object",
                  "properties": {
                    "selector": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "URL_TYPE"
                },
                "payload": {
                  "type": "string",
                  "enum": [
                    "subdirectory",
                    "subdomain"
                  ]
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "INTEGRATION"
                },
                "payload": {
                  "type": "string",
                  "enum": [
                    "proxy",
                    "javascript"
                  ]
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "DOM_CONTAINS"
                },
                "payload": {
                  "type": "object",
                  "properties": {
                    "selector": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "type": {
                  "const": "IN_FRAME"
                },
                "payload": {
                  "type": "boolean"
                }
              }
            }
          ]
        }
      },
      "required": [
        "payload",
        "type"
      ]
    },
    "StringMatch": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "title": "String Match mode",
          "type": "string",
          "default": "START_WITH",
          "enum": [
            "START_WITH",
            "NOT_START_WITH",
            "END_WITH",
            "NOT_END_WITH",
            "CONTAIN",
            "NOT_CONTAIN",
            "IS_EXACTLY",
            "NOT_IS_EXACTLY",
            "MATCH_REGEX"
          ],
          "description": "Refer to https://app.gitbook.com/@weglot/s/weglot-ninjas/core/api-reference for the meaning of each option"
        },
        "value": {
          "title": "Value",
          "type": "string",
          "description": "E.g: /blog"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "description": "Field which could be concerned (eg. header name)"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "title": "String Match"
    },
    "CDNProvider": {
      "title": "CDN Provider",
      "description": "Which CDN provider should the rule apply to",
      "type": "string",
      "default": "cloudflare",
      "enum": [
        "cloudflare",
        "fly",
        "fastly",
        "stackpath"
      ]
    }
  }
}